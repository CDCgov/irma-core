name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - test

permissions: {}

env:
  CARGO_TERM_COLOR: always
  RELEASE_BIN: irma-core
  REGISTRY: ghcr.io

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract Changelog
        id: extract_changelog
        shell: bash
        run: perl .github/scripts/last_release_notes.pl > $RUNNER_TEMP/release_notes.md

      - name: Create Release
        id: create_release
        shell: bash
        run: |
          [[ "${{ github.ref_name }}" == "test" ]] && latest="--latest=false" || latest=

          gh release create "${{ github.ref_name }}" \
          --title "IRMA-core ${{ github.ref_name }}" \
          --notes-file "$RUNNER_TEMP/release_notes.md" \
          $latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release-image-and-rhel8-artifacts:
    name: Build and Push Release Image
    needs: [create-release]
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
          - arch: aarch64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest-${{ matrix.arch }}

      - name: Build and push Docker image
        id: buildpush
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Prepare Linux Binary
        shell: bash
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -- '-${{ matrix.arch }}$' | head -n 1)
          docker create --name temp-container $IMAGE_TAG \
          && docker cp temp-container:/app/irma-core ./irma-core \
          && docker rm temp-container \
          && tar -czf irma-core-linux-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz irma-core

      - name: Upload Linux Release Asset
        shell: bash
        run: |
          gh release upload "${{ github.ref_name }}" irma-core-linux-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-image-manifest:
    name: Create Image Manifest
    needs: build-release-image-and-rhel8-artifacts
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifests
        shell: bash
        run: |
          REPO=$(echo "${{ env.REGISTRY }}/${{ github.repository }}" | tr '[A-Z]' '[a-z]')
          VERSION=${REPO}:${{ github.ref_name }}
          LATEST=${REPO}:latest

          docker manifest create $VERSION --amend ${LATEST}-x86_64 --amend ${LATEST}-aarch64 \
            && docker manifest push $VERSION

          docker manifest create $LATEST --amend ${LATEST}-x86_64 --amend ${LATEST}-aarch64 \
            && docker manifest push $LATEST

  build-mac-windows-for-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: irma-core-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: irma-core-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: irma-core-windows-x86_64

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install latest nightly Rust
        run: |
          rustup update nightly
          rustup default nightly
          rustup target add ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.artifact_name }}-${{ github.ref_name }}.zip ${{ env.RELEASE_BIN }}.exe
          else
            tar -czf ../../../${{ matrix.artifact_name }}-${{ github.ref_name }}.tar.gz ${{ env.RELEASE_BIN }}
          fi

      - name: Upload Release Asset
        shell: bash
        run: |
          gh release upload "${{ github.ref_name }}" ${{ matrix.artifact_name }}-${{ github.ref_name }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-integrated-package:
    name: Create Integrated Package
    needs: [build-mac-windows-for-release, build-release-image-and-rhel8-artifacts]
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Download Release Assets
        shell: bash
        run: |
          gh release download "${{ github.ref_name }}" -p irma-core-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Binaries and Create Integrated Package
        shell: bash
        run: |
          tar -xzf irma-core-macos-x86_64-${{ github.ref_name }}.tar.gz && mv irma-core x86_gz \
          && tar -xzf irma-core-macos-aarch64-${{ github.ref_name }}.tar.gz && mv irma-core arm_gz \
          && lipo -create -output irma-core_Darwin x86_gz arm_gz \
          && tar -xzf irma-core-linux-x86_64-${{ github.ref_name }}.tar.gz && mv irma-core irma-core_Linux_x86_64 \
          && tar -xzf irma-core-linux-aarch64-${{ github.ref_name }}.tar.gz && mv irma-core irma-core_Linux_aarch64  \
          && rm *gz \
          && zip irma-core-integrated-${{ github.ref_name }}.zip irma-core_*

      - name: Upload Integrated Package
        shell: bash
        run: |
          gh release upload "${{ github.ref_name }}" irma-core-integrated-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
